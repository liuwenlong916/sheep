[{"D:\\1\\work\\sheep\\src\\App.vue":"1","D:\\1\\work\\sheep\\src\\components\\HelloWorld.vue":"2","D:\\1\\work\\sheep\\src\\main.ts":"3","D:\\1\\work\\sheep\\src\\vite-env.d.ts":"4","D:\\1\\work\\sheep\\vite.config.ts":"5"},{"size":833,"mtime":1666014278834,"results":"6","hashOfConfig":"7"},{"size":824,"mtime":1666016837420,"results":"8","hashOfConfig":"7"},{"size":116,"mtime":1666016958312,"results":"9","hashOfConfig":"7"},{"size":186,"mtime":1666015931478,"results":"10","hashOfConfig":"7"},{"size":220,"mtime":1666016837424,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"we4p3q",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\1\\work\\sheep\\src\\App.vue",[],[],"D:\\1\\work\\sheep\\src\\components\\HelloWorld.vue",[],[],"D:\\1\\work\\sheep\\src\\main.ts",[],[],"D:\\1\\work\\sheep\\src\\vite-env.d.ts",["27","28","29"],[],"D:\\1\\work\\sheep\\vite.config.ts",[],[],{"ruleId":"30","severity":2,"message":"31","line":5,"column":36,"nodeType":"32","messageId":"33","endLine":5,"endColumn":38},{"ruleId":"30","severity":2,"message":"31","line":5,"column":40,"nodeType":"32","messageId":"33","endLine":5,"endColumn":42},{"ruleId":"34","severity":1,"message":"35","line":5,"column":44,"nodeType":"36","messageId":"37","endLine":5,"endColumn":47,"suggestions":"38"},"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["39","40"],{"messageId":"41","fix":"42","desc":"43"},{"messageId":"44","fix":"45","desc":"46"},"suggestUnknown",{"range":"47","text":"48"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"47","text":"49"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[152,155],"unknown","never"]